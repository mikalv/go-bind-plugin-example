package main

// Autogenerated by github.com/wendigo/go-bind-plugin on 2016-11-08 17:58:37.219391162 +0100 CET, do not edit!
// Command: go-bind-plugin -plugin-path plugin.so -plugin-package ./plugin -output-name PluginAPI -output-path plugin_api.go -output-package  -dereference-vars -rebuild
//
// Plugin plugin.so info:
// - package: github.com/wendigo/go-bind-plugin-example/plugin
// - size: 2334896 bytes
// - sha256: 4f6b6afcc22109fd5532f5a66b24810736a46119633344edecb32297709c04ea

import (
	"fmt"
	"plugin"
	"reflect"
	"strings"
)

// PluginAPI wraps symbols (functions and variables) exported by plugin github.com/wendigo/go-bind-plugin-example/plugin
//
// See docs at https://godoc.org/github.com/wendigo/go-bind-plugin-example/plugin
type PluginAPI struct {
	// Exported functions
	_CalculateSin func(float64) float64
	_SayHello     func(string)

	// Exported variables (public references)

	// See docs at https://godoc.org/github.com/wendigo/go-bind-plugin-example/plugin#CurrentYear
	CurrentYear int
}

// CalculateSin function was exported from plugin github.com/wendigo/go-bind-plugin-example/plugin symbol 'CalculateSin'
//
// See docs at https://godoc.org/github.com/wendigo/go-bind-plugin-example/plugin#CalculateSin
func (p *PluginAPI) CalculateSin(in0 float64) float64 {
	return p._CalculateSin(in0)
}

// SayHello function was exported from plugin github.com/wendigo/go-bind-plugin-example/plugin symbol 'SayHello'
//
// See docs at https://godoc.org/github.com/wendigo/go-bind-plugin-example/plugin#SayHello
func (p *PluginAPI) SayHello(in0 string) {
	p._SayHello(in0)
}

// String returnes textual representation of the wrapper. It provides info on exported symbols and variables.
func (p *PluginAPI) String() string {
	var lines []string
	lines = append(lines, "Wrapper info:")
	lines = append(lines, "\t- Generated on: 2016-11-08 17:58:37.219391162 +0100 CET")
	lines = append(lines, "\t- Command: go-bind-plugin -plugin-path plugin.so -plugin-package ./plugin -output-name PluginAPI -output-path plugin_api.go -output-package  -dereference-vars -rebuild")
	lines = append(lines, "\nPlugin info:")
	lines = append(lines, "\t- package: github.com/wendigo/go-bind-plugin-example/plugin")
	lines = append(lines, "\t- sha256 sum: 4f6b6afcc22109fd5532f5a66b24810736a46119633344edecb32297709c04ea")
	lines = append(lines, "\t- size: 2334896 bytes")
	lines = append(lines, "\nExported functions (2):")
	lines = append(lines, "\t- CalculateSin func(float64) (float64)")
	lines = append(lines, "\t- SayHello func(string)")

	lines = append(lines, "\nExported variables (1):")
	lines = append(lines, "\t- CurrentYear int")

	lines = append(lines, "\nPlugin imports:")
	return strings.Join(lines, "\n")
}

// LoadPluginAPI loads plugin from the given path and binds symbols (variables and functions)
// to the PluginAPI struct. All variables are derefenences.

func BindPluginAPI(path string) (*PluginAPI, error) {
	p, err := plugin.Open(path)

	if err != nil {
		return nil, fmt.Errorf("Could not open plugin: %s", err)
	}

	ret := new(PluginAPI)

	funcCalculateSin, err := p.Lookup("CalculateSin")
	if err != nil {
		return nil, err
	}

	if typed, ok := funcCalculateSin.(func(float64) float64); ok {
		ret._CalculateSin = typed
	} else {
		return nil, fmt.Errorf("Could not export function 'CalculateSin', incompatible types 'func(float64) (float64)' and '%s'", reflect.TypeOf(funcCalculateSin))
	}

	funcSayHello, err := p.Lookup("SayHello")
	if err != nil {
		return nil, err
	}

	if typed, ok := funcSayHello.(func(string)); ok {
		ret._SayHello = typed
	} else {
		return nil, fmt.Errorf("Could not export function 'SayHello', incompatible types 'func(string)' and '%s'", reflect.TypeOf(funcSayHello))
	}

	varCurrentYear, err := p.Lookup("CurrentYear")
	if err != nil {
		return nil, err
	}

	if typed, ok := varCurrentYear.(*int); ok {
		ret.CurrentYear = *typed
	} else {
		return nil, fmt.Errorf("Could not export variable 'CurrentYear', incompatible types 'int' and '%s'", reflect.TypeOf(varCurrentYear))
	}

	return ret, nil
}
